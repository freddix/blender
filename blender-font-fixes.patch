From: Kevin Roy <kiniou@gmail.com>
Date: Thu, 16 May 2013 10:42:38 +0200
Subject: look_for_droid_ttf_with_fontconfig

 * Remove bad installation of fonts directory into locales.
 * Avoid using the droid font shipped with upstream source
   and use fontconfig to get it.

Signed-off-by: Matteo F. Vescovi <mfv.debian@gmail.com>
---
 CMakeLists.txt                                   |  7 ++++
 build_files/cmake/macros.cmake                   |  3 ++
 source/blender/blenfont/CMakeLists.txt           |  7 ++++
 source/blender/blenfont/intern/blf_translation.c | 23 +++++++++++++
 source/blender/blenlib/BLI_fileops.h             |  1 +
 source/blender/blenlib/intern/fileops.c          | 44 ++++++++++++++++++++++++
 source/creator/CMakeLists.txt                    |  1 -
 7 files changed, 85 insertions(+), 1 deletion(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index b1a7830..0a58232 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -641,6 +641,13 @@ if(UNIX AND NOT APPLE)
 		endif()
 	endif()
 
+	if(WITH_FONTCONFIG)
+		find_package(Fontconfig)
+		if(NOT FONTCONFIG_FOUND)
+			set(WITH_FONTCONFIG OFF)
+		endif()
+	endif()
+
 	# Codecs
 	if(WITH_CODEC_SNDFILE)
 		find_package_wrapper(SndFile)
diff --git a/build_files/cmake/macros.cmake b/build_files/cmake/macros.cmake
index 854609f..9324dec 100644
--- a/build_files/cmake/macros.cmake
+++ b/build_files/cmake/macros.cmake
@@ -284,6 +284,9 @@ macro(setup_liblinks
 	if(WITH_SYSTEM_GLEW)
 		target_link_libraries(${target} ${GLEW_LIBRARY})
 	endif()
+	if(WITH_FONTCONFIG)
+		target_link_libraries(${target} ${FONTCONFIG_LIBRARIES})
+	endif()
 	if(WITH_BULLET AND WITH_SYSTEM_BULLET)
 		target_link_libraries(${target} ${BULLET_LIBRARIES})
 	endif()
diff --git a/source/blender/blenfont/CMakeLists.txt b/source/blender/blenfont/CMakeLists.txt
index 2debe51..b75cf9d 100644
--- a/source/blender/blenfont/CMakeLists.txt
+++ b/source/blender/blenfont/CMakeLists.txt
@@ -58,6 +58,13 @@ if(WITH_INTERNATIONAL)
 	add_definitions(-DWITH_INTERNATIONAL)
 endif()
 
+if(WITH_FONTCONFIG)
+	list(APPEND INC_SYS
+		${FONTCONFIG_INCLUDE_DIRS}
+	)
+	add_definitions(-DWITH_FONTCONFIG)
+endif()
+
 add_definitions(-DGLEW_STATIC)
 
 blender_add_lib(bf_blenfont "${SRC}" "${INC}" "${INC_SYS}")
diff --git a/source/blender/blenfont/intern/blf_translation.c b/source/blender/blenfont/intern/blf_translation.c
index 57f442f..cd21778 100644
--- a/source/blender/blenfont/intern/blf_translation.c
+++ b/source/blender/blenfont/intern/blf_translation.c
@@ -47,7 +47,11 @@
 
 #include "boost_locale_wrapper.h"
 
+#ifdef WITH_FONTCONFIG
+#include <fontconfig/fontconfig.h>
+#else
 static const char unifont_filename[] = "droidsans.ttf.gz";
+#endif
 static unsigned char *unifont_ttf = NULL;
 static int unifont_size = 0;
 static const char unifont_mono_filename[] = "bmonofont-i18n.ttf.gz";
@@ -59,6 +63,24 @@ unsigned char *BLF_get_unifont(int *unifont_size_r)
 {
 #ifdef WITH_INTERNATIONAL
 	if (unifont_ttf == NULL) {
+#ifdef WITH_FONTCONFIG
+		FcFontSet *fontset = NULL;
+		FcValue v;
+		FcPattern *pattern = FcPatternBuild (0, FC_FAMILY, FcTypeString, "Droid Sans",FC_STYLE, FcTypeString, "Regular", (char *) 0);
+		fontset = FcFontList(0,pattern,0);
+		if (fontset->nfont > 0) {
+			//get the file of the first font in the fontset that match pattern
+			FcPatternGet(fontset->fonts[0], FC_FILE, 0, &v);
+			//load the file stored in the union of FcValue into memory
+			unifont_ttf = (unsigned char*)BLI_file_to_mem(
+				(const char *)v.u.s,
+				&unifont_size
+			);
+		}
+		else {
+			printf("%s: 'Droid Sans Regular' font not found with fontconfig\n",__func__);
+		}
+#else
 		const char * const fontpath = BLI_get_folder(BLENDER_DATAFILES, "fonts");
 		if (fontpath) {
 			char unifont_path[1024];
@@ -69,6 +91,7 @@ unsigned char *BLF_get_unifont(int *unifont_size_r)
 		}
 		else {
 			printf("%s: 'fonts' data path not found for international font, continuing\n", __func__);
+#endif
 		}
 	}
 
diff --git a/source/blender/blenlib/BLI_fileops.h b/source/blender/blenlib/BLI_fileops.h
index 0a6d95d..f9a66aa 100644
--- a/source/blender/blenlib/BLI_fileops.h
+++ b/source/blender/blenlib/BLI_fileops.h
@@ -80,6 +80,7 @@ bool   BLI_file_touch(const char *file);
 
 int    BLI_file_gzip(const char *from, const char *to);
 char  *BLI_file_ungzip_to_mem(const char *from_file, int *size_r);
+char  *BLI_file_to_mem(const char *from_file, int *size_r);
 
 size_t BLI_file_descriptor_size(int file);
 size_t BLI_file_size(const char *file);
diff --git a/source/blender/blenlib/intern/fileops.c b/source/blender/blenlib/intern/fileops.c
index 26b9e08..f1198d5 100644
--- a/source/blender/blenlib/intern/fileops.c
+++ b/source/blender/blenlib/intern/fileops.c
@@ -159,6 +159,50 @@ char *BLI_file_ungzip_to_mem(const char *from_file, int *size_r)
 	return mem;
 }
 
+/* read the file in from_file and write it to memory to_mem, at most size bytes.
+   return the file size
+  */
+char *BLI_file_to_mem(const char *from_file, int *size_r) {
+
+    FILE * file;
+    int readsize, size, alloc_size=0;
+    char *mem= NULL;
+    const int chunk_size= 512*1024;
+
+    size= 0;
+
+    file = fopen( from_file, "rb" );
+
+    for(;;) {
+        if(mem==NULL) {
+            mem= MEM_callocN(chunk_size, "BLI_file_to_mem");
+            alloc_size= chunk_size;
+        } else {
+            mem= MEM_reallocN(mem, size+chunk_size);
+            alloc_size+= chunk_size;
+        }
+
+        readsize= fread(mem+size, 1, chunk_size, file);
+        if(readsize>0) {
+            size+= readsize;
+        }
+        else break;
+    }
+
+    if(size==0) {
+        MEM_freeN(mem);
+        mem= NULL;
+    }
+    else if(alloc_size!=size)
+        mem= MEM_reallocN(mem, size);
+
+    fclose(file);
+    *size_r= size;
+
+    return mem;
+
+}
+
 /**
  * Returns true if the file with the specified name can be written.
  * This implementation uses access(2), which makes the check according
diff --git a/source/creator/CMakeLists.txt b/source/creator/CMakeLists.txt
index 55e9ac5..9c060d3 100644
--- a/source/creator/CMakeLists.txt
+++ b/source/creator/CMakeLists.txt
@@ -307,7 +307,6 @@ if(WITH_INTERNATIONAL)
 	install(
 		DIRECTORY
 			${CMAKE_SOURCE_DIR}/release/datafiles/locale/
-			${CMAKE_SOURCE_DIR}/release/datafiles/fonts
 		DESTINATION ${CMAKE_INSTALL_PREFIX}/share/locale
 		PATTERN ".svn" EXCLUDE
 	)
